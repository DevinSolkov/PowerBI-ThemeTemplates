<prompt>
  <purpose>
    Fix a Power BI theme JSON so it validates against reportThemeSchema-2.114. Replace invalid named nodes under visualStyles.tableEx and visualStyles.pivotTable with schema-compliant wildcard blocks. Preserve one default preset per visual in the main theme and emit variant theme files for the remaining presets.
  </purpose>

  <plan>
    <objective>Produce a schema-valid main theme plus optional variants while retaining intended styling.</objective>
    <scope>
      <in_scope>Refactor visualStyles for tableEx and pivotTable. Keep one default preset per visual in the main file. Generate additional variant files by swapping the default style block contents.</in_scope>
      <out_of_scope>Altering colors or typography beyond structural fixes. Changing visuals other than tableEx and pivotTable unless required for validation.</out_of_scope>
    </scope>
    <assumptions>
      <item>Theme schema is reportThemeSchema-2.114 as referenced by the theme’s $schema URL.</item>
      <item>VS Code environment can read and write files in the working folder.</item>
    </assumptions>
    <strategy>
      <step>Load the source theme JSON. Snapshot it as a backup.</step>
      <step>Detect invalid keys under visualStyles.tableEx and visualStyles.pivotTable. These keys must not be custom names. Convert structure so each visual has a single "*" entry that contains arrays of property cards.</step>
      <step>Choose defaults: tableEx = Golden Harbor Ledger. pivotTable = Maritime Steel Grid. Merge their card arrays into the "*" block for each visual.</step>
      <step>Create variant themes by swapping the "*" block contents for each remaining preset name, producing one file per variant.</step>
      <step>Run structural checks: ensure every property under visualStyles uses arrays of objects and that only allowed card names are present.</step>
      <step>Validate JSON against schema 2.114 using a local JSON validation step or fallback structural assertions if a validator is unavailable.</step>
    </strategy>
    <risks>
      <risk>
        <description>Property cards not recognized by current schema build.</description>
        <mitigation>Keep card names unchanged. If a card is not recognized, log and remove the card minimally to pass validation.</mitigation>
      </risk>
      <risk>
        <description>Multiple presets cannot coexist in one file per schema.</description>
        <mitigation>Ship one default in the main file and emit separate variant files.</mitigation>
      </risk>
    </risks>
    <confirmation_prompt>Proceed with Golden Harbor Ledger and Maritime Steel Grid as defaults and emit variants for the rest</confirmation_prompt>
    <auto_confirm_if_silent>Yes</auto_confirm_if_silent>
  </plan>

  <milestones>
    <milestone id="1" title="Requirement_synthesis">
      <deliverables>
        <item>Requirements section recorded inside execution log</item>
      </deliverables>
      <acceptance_criteria>
        <item>All goals mapped to tests</item>
        <item>No unresolved blockers remain</item>
      </acceptance_criteria>
      <tests>
        <item>Checklist presence for schema conformance and structure rules</item>
      </tests>
    </milestone>

    <milestone id="2" title="Design_and_plan_refinement">
      <deliverables>
        <item>Design notes that show transformation from named nodes to wildcard structure</item>
      </deliverables>
      <acceptance_criteria>
        <item>Design covers success and fallback paths for missing cards</item>
        <item>Decision log with default preset choices</item>
      </acceptance_criteria>
      <tests>
        <item>Cross reference named presets to outputs</item>
      </tests>
    </milestone>

    <milestone id="3" title="Implementation">
      <deliverables>
        <item>Updated main theme JSON</item>
        <item>Variant theme JSON files, one per additional preset</item>
        <item>Minimal README notes inside execution log</item>
      </deliverables>
      <acceptance_criteria>
        <item>Main theme validates structurally</item>
        <item>Each variant builds with no structural errors</item>
      </acceptance_criteria>
      <tests>
        <item>Programmatic assertions on visualStyles structure</item>
      </tests>
    </milestone>

    <milestone id="4" title="Validation_and_packaging">
      <deliverables>
        <item>Evidence log of checks</item>
        <item>Artifacts list with file paths</item>
      </deliverables>
      <acceptance_criteria>
        <item>No validation errors emitted by Power BI Desktop or schema checker</item>
        <item>Rubric score meets target threshold</item>
      </acceptance_criteria>
      <tests>
        <item>End to end open and apply theme smoke test description</item>
      </tests>
    </milestone>
  </milestones>

  <rubric scale="0-100">
    <criterion id="C1" name="Requirement_coverage" weight="0.25">
      <definition>All stated goals have tests and deliverables</definition>
      <scoring>
        <score_100>Every goal mapped to at least one test and artifact</score_100>
        <score_70>Minor gaps with clear remediation steps</score_70>
        <score_40>Multiple goals without tests</score_40>
        <score_0>No mapping</score_0>
      </scoring>
    </criterion>
    <criterion id="C2" name="Design_quality" weight="0.20">
      <definition>Clarity, feasibility, and tradeoff reasoning</definition>
    </criterion>
    <criterion id="C3" name="Code_correctness" weight="0.25">
      <definition>Static checks clean and structure validates</definition>
    </criterion>
    <criterion id="C4" name="Documentation_and_handoff" weight="0.15">
      <definition>Execution notes and change log are complete</definition>
    </criterion>
    <criterion id="C5" name="Risk_management" weight="0.15">
      <definition>Risks tracked with mitigations and status</definition>
    </criterion>
    <scoring_instructions>Compute weighted sum to 100. Record evidence in the log.</scoring_instructions>
    <target_threshold>90</target_threshold>
  </rubric>

  <execution_loop>
    <before_each_milestone>
      <action>Restate the milestone objective and acceptance criteria.</action>
      <action>List deliverables and tests.</action>
      <action>Assume confirmation if none provided and log the assumption.</action>
    </before_each_milestone>
    <during_milestone>
      <action>Create deliverables and run checks.</action>
      <action>Record evidence of structure and any fixes.</action>
    </during_milestone>
    <after_each_milestone>
      <action>Summarize outputs and variances.</action>
      <action>Score relevant rubric criteria.</action>
      <action>Ask to proceed, then proceed if silent and log the assumption.</action>
    </after_each_milestone>
    <finalization>
      <action>Assemble Final_Report with plan, logs, rubric scores, risks, next actions.</action>
      <action>List all generated JSON paths in Artifacts.</action>
      <action>Provide concise handoff guidance.</action>
    </finalization>
  </execution_loop>

  <inputs>
    <source_transcript>
      High stage summary. The current theme fails validation with errors pointing at visualStyles/tableEx/* and visualStyles/pivotTable/* where custom-named nodes are used. Goal is to restructure to schema compliant wildcard blocks and preserve design intent. Source file: "Rainwater Theme v4.1.with-table-matrix.json".
    </source_transcript>
    <context>
      VS Code workspace contains the theme JSON. Use file operations and JSON parsing only. Follow schema reportThemeSchema-2.114 as referenced in the theme’s $schema URL. Reference: MetaPrompt XML prompt spec governs this task structure.
    </context>
    <outputs_requested>
      <item>Corrected main theme file: "Rainwater Theme v4.1.fixed.json"</item>
      <item>Optional variants: one per original preset under tableEx and pivotTable, e.g. "Rainwater Theme v4.1.fixed.tableEx.Mistline Accent Table.json"</item>
      <item>Execution log inside Final_Report</item>
    </outputs_requested>
    <tools_and_env>
      Visual Studio Code, built-in JSON tools. If JSON schema validation utility is unavailable, run structural assertions:
      1. Under visualStyles each visual key holds either "*" or selectors, not arbitrary names.
      2. Each card like background, columnHeaders, values, grid, totals, subTotals is an array of objects.
      3. No unexpected keys exist at the level where arrays are required.
    </tools_and_env>
  </inputs>

  <protocol>
    <step>Confirm defaults: tableEx = Golden Harbor Ledger, pivotTable = Maritime Steel Grid. If no response, proceed.</step>
    <step>Implementation detail: 
      1. Read "Rainwater Theme v4.1.with-table-matrix.json".
      2. Backup to "Rainwater Theme v4.1.backup.json".
      3. For tableEx: gather the card arrays from "Golden Harbor Ledger". Create visualStyles.tableEx["*"] with those arrays. Remove named children.
      4. For pivotTable: gather card arrays from "Maritime Steel Grid". Create visualStyles.pivotTable["*"] with those arrays. Remove named children.
      5. Emit the corrected main file as "Rainwater Theme v4.1.fixed.json".
      6. For each remaining preset under tableEx and pivotTable, duplicate the fixed file and replace the "*" block for the corresponding visual with that preset’s arrays. Name files accordingly as described in outputs_requested.
      7. Run structural assertions. If any assertion fails, log and minimally remove or rename the offending card to pass validation, then recheck.
    </step>
    <step>Record changes and evidence in Final_Report. List artifacts.</step>
  </protocol>
</prompt>
